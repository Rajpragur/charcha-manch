rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is post owner
    function isPostOwner(postId) {
      return request.auth != null && 
        exists(/databases/$(database)/documents/discussion_posts/$(postId)) &&
        get(/databases/$(database)/documents/discussion_posts/$(postId)).data.userId == request.auth.uid;
    }
    
    // Helper function to check if user has admin role (simplified)
    function hasAdminRole() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin', 'moderator'];
    }
    
    // Allow authenticated users to read and write their own data
    // Allow public read access to user profiles for displaying nagrik numbers
    match /user_profiles/{userId} {
      allow read: if true; // Allow public read access for nagrik numbers
      allow write: if request.auth != null && request.auth.uid == userId; // Only owner can write
    }
    
    // Allow authenticated users to read and write satisfaction surveys
    match /satisfaction_surveys/{surveyId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow authenticated users to read and write constituency interactions
    match /constituency_interactions/{interactionId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow authenticated users to read global stats, allow write for setup
    match /global_stats/{docId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // Temporarily allow write for setup
    }
    
    // Allow authenticated users to read and write referrals
    match /referrals/{referralId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow authenticated users to read and write department ratings
    match /department_ratings/{ratingId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow authenticated users to read and write constituency scores
    match /constituency_scores/{scoreId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow authenticated users to read and write questionnaire submissions
    match /questionnaire_submissions/{submissionId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow authenticated users to read and write manifesto scores
    match /manifesto_scores/{scoreId} {
      allow read, write: if request.auth != null;
    }
    
    // Users collection - for admin management
    match /users/{userId} {
      // Allow authenticated users to read and write users collection during setup
      // This will be restricted to actual admins later
      allow read, write: if request.auth != null;
    }
    
    // Admin collection - for admin-specific data
    match /admin/{docId} {
      // Allow read/write for authenticated users during setup
      // This will be restricted to actual admins later
      allow read, write: if request.auth != null;
    }
    
    // Constituencies collection - allow public read access, authenticated write
    match /constituencies/{constituencyId} {
      allow read: if true; // Allow public read access
      allow write: if request.auth != null; // Only authenticated users can write
    }
    
    // Constituency news collection - allow all authenticated users to read, write for now
    match /constituency_news/{newsId} {
      allow read, write: if request.auth != null;
    }
    
    // Blog likes collection - allow authenticated users to manage their likes
    match /blog_likes/{likeId} {
      allow read, write: if request.auth != null;
    }
    
    // Blog views collection - allow authenticated users to track their views
    match /blog_views/{viewId} {
      allow read, write: if request.auth != null;
    }
    
    // Discussion posts collection - allow authenticated users to create posts, admins to moderate
    match /discussion_posts/{postId} {
      allow read: if true; // Allow public read access
      allow create: if request.auth != null; // Only authenticated users can create
      allow update: if request.auth != null; // Allow all authenticated users to update (for like/dislike counts)
      allow delete: if request.auth != null && (
        resource.data.userId == request.auth.uid || // Users can delete their own posts
        hasAdminRole() // Admins can delete any post
      );
    }
    
    // Comments collection - allow authenticated users to read and write comments
    match /comments/{commentId} {
      allow read: if true; // Allow public read access
      allow create: if request.auth != null; // Only authenticated users can create
      allow update: if request.auth != null && (
        resource.data.userId == request.auth.uid || // Users can edit their own comments
        isPostOwner(resource.data.postId) || // Post owners can edit any comment on their post
        hasAdminRole() // Admins can edit any comment
      );
      allow delete: if request.auth != null && (
        resource.data.userId == request.auth.uid || // Users can delete their own comments
        isPostOwner(resource.data.postId) || // Post owners can delete any comment on their post
        hasAdminRole() // Admins can delete any comment
      );
    }
    
    // Post likes collection - allow authenticated users to manage their likes
    match /post_likes/{likeId} {
      allow read: if true; // Allow public read access
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid; // Users can only create likes for themselves
      allow update, delete: if request.auth != null && 
        resource.data.userId == request.auth.uid; // Users can only manage their own likes
    }
    
    // Post dislikes collection - allow authenticated users to manage their dislikes
    match /post_dislikes/{dislikeId} {
      allow read: if true; // Allow public read access
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid; // Users can only create dislikes for themselves
      allow update, delete: if request.auth != null && 
        resource.data.userId == request.auth.uid; // Users can only manage their own dislikes
    }
    
    // Comment likes collection - allow authenticated users to manage their likes
    match /comment_likes/{likeId} {
      allow read: if true; // Allow public read access
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid; // Users can only create likes for themselves
      allow update, delete: if request.auth != null && 
        resource.data.userId == request.auth.uid; // Users can only manage their own likes
    }
    
    // Comment dislikes collection - allow authenticated users to manage their dislikes
    match /comment_dislikes/{dislikeId} {
      allow read: if true; // Allow public read access
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid; // Users can only create dislikes for themselves
      allow update, delete: if request.auth != null && 
        resource.data.userId == request.auth.uid; // Users can only manage their own dislikes
    }
    
    // Reply likes collection - allow authenticated users to manage their likes
    match /reply_likes/{likeId} {
      allow read: if true; // Allow public read access
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid; // Users can only create likes for themselves
      allow update, delete: if request.auth != null && 
        resource.data.userId == request.auth.uid; // Users can only manage their own likes
    }
    
    // Reply dislikes collection - allow authenticated users to manage their dislikes
    match /reply_dislikes/{dislikeId} {
      allow read: if true; // Allow public read access
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid; // Users can only create dislikes for themselves
      allow update, delete: if request.auth != null && 
        resource.data.userId == request.auth.uid; // Users can only manage their own dislikes
    }
    
    // Comment replies collection - allow authenticated users to read and write replies
    match /comment_replies/{replyId} {
      allow read: if true; // Allow public read access
      allow create: if request.auth != null; // Only authenticated users can create
      allow update: if request.auth != null && (
        resource.data.userId == request.auth.uid || // Users can edit their own replies
        isPostOwner(resource.data.postId) || // Post owners can edit any reply on their post
        hasAdminRole() // Admins can edit any reply
      );
      allow delete: if request.auth != null && (
        resource.data.userId == request.auth.uid || // Users can delete their own replies
        isPostOwner(resource.data.postId) || // Post owners can delete any reply on their post
        hasAdminRole() // Admins can delete any reply
      );
    }
    
    // Allow public read access to published blogs for better SEO and sharing
    match /blogs/{blogId} {
      allow read: if true; // Allow public read access
      allow write: if request.auth != null; // Only authenticated users can write
    }
    
    // Allow public read access to constituency data for better user experience
    match /constituency_scores/{scoreId} {
      allow read: if true; // Allow public read access
      allow write: if request.auth != null; // Only authenticated users can write
    }
  }
}